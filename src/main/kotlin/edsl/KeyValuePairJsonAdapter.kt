// Code generated by moshi-kotlin-codegen. Do not edit.
package edsl

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonDataException
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import java.lang.NullPointerException
import java.lang.reflect.Type
import kotlin.Array
import kotlin.String

class KeyValuePairJsonAdapter<A, B>(moshi: Moshi, types: Array<Type>) : JsonAdapter<KeyValuePair<A, B>>() {
    private val options: JsonReader.Options = JsonReader.Options.of("key", "val")

    private val aNullableAnyAdapter: JsonAdapter<A> =
            moshi.adapter<A>(types[0], kotlin.collections.emptySet(), "key")

    private val bNullableAnyAdapter: JsonAdapter<B> =
            moshi.adapter<B>(types[1], kotlin.collections.emptySet(), "value")

    override fun toString(): String = "GeneratedJsonAdapter(KeyValuePair)"

    override fun fromJson(reader: JsonReader): KeyValuePair<A, B> {
        var key: A? = null
        var value_: B? = null
        reader.beginObject()
        while (reader.hasNext()) {
            when (reader.selectName(options)) {
                0 -> key = aNullableAnyAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'key' was null at ${reader.path}")
                1 -> value_ = bNullableAnyAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'value_' was null at ${reader.path}")
                -1 -> {
                    // Unknown name, skip it.
                    reader.skipName()
                    reader.skipValue()
                }
            }
        }
        reader.endObject()
        var result = KeyValuePair<A, B>(
                key = key ?: throw JsonDataException("Required property 'key' missing at ${reader.path}"),
                value = value_ ?: throw JsonDataException("Required property 'value_' missing at ${reader.path}"))
        return result
    }

    override fun toJson(writer: JsonWriter, value: KeyValuePair<A, B>?) {
        if (value == null) {
            throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
        }
        writer.beginObject()
        writer.name("key")
        aNullableAnyAdapter.toJson(writer, value.key)
        writer.name("val")
        bNullableAnyAdapter.toJson(writer, value.value)
        writer.endObject()
    }
}
