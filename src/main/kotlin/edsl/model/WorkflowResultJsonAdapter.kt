// Code generated by moshi-kotlin-codegen. Do not edit.
package edsl.model

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonDataException
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.Types
import java.lang.NullPointerException
import kotlin.String
import kotlin.collections.List

class WorkflowResultJsonAdapter(moshi: Moshi) : JsonAdapter<WorkflowResult>() {
    private val options: JsonReader.Options = JsonReader.Options.of("name", "params")

    private val stringAdapter: JsonAdapter<String> =
            moshi.adapter<String>(String::class.java, kotlin.collections.emptySet(), "name")

    private val listOfStringAdapter: JsonAdapter<List<String>> =
            moshi.adapter<List<String>>(Types.newParameterizedType(List::class.java, String::class.java), kotlin.collections.emptySet(), "params")

    override fun toString(): String = "GeneratedJsonAdapter(WorkflowResult)"

    override fun fromJson(reader: JsonReader): WorkflowResult {
        var name: String? = null
        var params: List<String>? = null
        reader.beginObject()
        while (reader.hasNext()) {
            when (reader.selectName(options)) {
                0 -> name = stringAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'name' was null at ${reader.path}")
                1 -> params = listOfStringAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'params' was null at ${reader.path}")
                -1 -> {
                    // Unknown name, skip it.
                    reader.skipName()
                    reader.skipValue()
                }
            }
        }
        reader.endObject()
        var result = WorkflowResult(
                name = name ?: throw JsonDataException("Required property 'name' missing at ${reader.path}"))
        result = result.copy(
                params = params ?: result.params)
        return result
    }

    override fun toJson(writer: JsonWriter, value: WorkflowResult?) {
        if (value == null) {
            throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
        }
        writer.beginObject()
        writer.name("name")
        stringAdapter.toJson(writer, value.name)
        writer.name("params")
        listOfStringAdapter.toJson(writer, value.params)
        writer.endObject()
    }
}
