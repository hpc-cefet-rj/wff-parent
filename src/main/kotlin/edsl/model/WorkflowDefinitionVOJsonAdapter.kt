// Code generated by moshi-kotlin-codegen. Do not edit.
package edsl.model

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonDataException
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.Types
import java.lang.NullPointerException
import kotlin.String
import kotlin.collections.List

class WorkflowDefinitionVOJsonAdapter(moshi: Moshi) : JsonAdapter<WorkflowDefinitionVO>() {
    private val options: JsonReader.Options =
            JsonReader.Options.of("name", "relationItems", "udfSpecItems", "activityItems", "workflowResultItems")

    private val stringAdapter: JsonAdapter<String> =
            moshi.adapter<String>(String::class.java, kotlin.collections.emptySet(), "name")

    private val listOfRelationAdapter: JsonAdapter<List<Relation>> =
            moshi.adapter<List<Relation>>(Types.newParameterizedType(List::class.java, Relation::class.java), kotlin.collections.emptySet(), "relationItems")

    private val listOfUDFSpecAdapter: JsonAdapter<List<UDFSpec>> =
            moshi.adapter<List<UDFSpec>>(Types.newParameterizedType(List::class.java, UDFSpec::class.java), kotlin.collections.emptySet(), "udfSpecItems")

    private val listOfActivityAdapter: JsonAdapter<List<Activity>> =
            moshi.adapter<List<Activity>>(Types.newParameterizedType(List::class.java, Activity::class.java), kotlin.collections.emptySet(), "activityItems")

    private val listOfWorkflowResultAdapter: JsonAdapter<List<WorkflowResult>> =
            moshi.adapter<List<WorkflowResult>>(Types.newParameterizedType(List::class.java, WorkflowResult::class.java), kotlin.collections.emptySet(), "workflowResultItems")

    override fun toString(): String = "GeneratedJsonAdapter(WorkflowDefinitionVO)"

    override fun fromJson(reader: JsonReader): WorkflowDefinitionVO {
        var name: String? = null
        var relationItems: List<Relation>? = null
        var udfSpecItems: List<UDFSpec>? = null
        var activityItems: List<Activity>? = null
        var workflowResultItems: List<WorkflowResult>? = null
        reader.beginObject()
        while (reader.hasNext()) {
            when (reader.selectName(options)) {
                0 -> name = stringAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'name' was null at ${reader.path}")
                1 -> relationItems = listOfRelationAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'relationItems' was null at ${reader.path}")
                2 -> udfSpecItems = listOfUDFSpecAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'udfSpecItems' was null at ${reader.path}")
                3 -> activityItems = listOfActivityAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'activityItems' was null at ${reader.path}")
                4 -> workflowResultItems = listOfWorkflowResultAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'workflowResultItems' was null at ${reader.path}")
                -1 -> {
                    // Unknown name, skip it.
                    reader.skipName()
                    reader.skipValue()
                }
            }
        }
        reader.endObject()
        var result = WorkflowDefinitionVO()
        result = result.copy(
                name = name ?: result.name,
                relationItems = relationItems ?: result.relationItems,
                udfSpecItems = udfSpecItems ?: result.udfSpecItems,
                activityItems = activityItems ?: result.activityItems,
                workflowResultItems = workflowResultItems ?: result.workflowResultItems)
        return result
    }

    override fun toJson(writer: JsonWriter, value: WorkflowDefinitionVO?) {
        if (value == null) {
            throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
        }
        writer.beginObject()
        writer.name("name")
        stringAdapter.toJson(writer, value.name)
        writer.name("relationItems")
        listOfRelationAdapter.toJson(writer, value.relationItems)
        writer.name("udfSpecItems")
        listOfUDFSpecAdapter.toJson(writer, value.udfSpecItems)
        writer.name("activityItems")
        listOfActivityAdapter.toJson(writer, value.activityItems)
        writer.name("workflowResultItems")
        listOfWorkflowResultAdapter.toJson(writer, value.workflowResultItems)
        writer.endObject()
    }
}
